/**
 * @author perry
 * stole from my private 1.8 client that he put this gradle on lulz
*/

plugins {
    id 'java'
    id 'de.fuerstenau.buildconfig' version '1.1.4'
    id 'io.freefair.lombok' version '6.4.3'
}

version = '1.0.0'
group = 'wtf.saturn'
archivesBaseName = 'saturn'

sourceCompatibility = targetCompatibility = '8'
compileJava {
    sourceCompatibility = targetCompatibility = '8'
    options.encoding 'UTF-8'
}

def execute(String cmd) {
    try {
        def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}

buildConfig {
    buildConfigField "String", "HASH", "${execute("git rev-parse --short HEAD")}"
    buildConfigField "String", "BRANCH", "${execute("git branch").replace("* ", "")}"
    buildConfigField "String", "VERSION", "${project.version}"

    packageName "wtf.saturn.util.versioning"
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

// https://github.com/mfuerstenau/gradle-buildconfig-plugin/issues/30#issuecomment-910241307
configurations {
    create("compile")
}

// https://github.com/mfuerstenau/gradle-buildconfig-plugin/issues/30#issuecomment-910241307
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

repositories {
    mavenCentral()
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        url = 'https://nexus.velocitypowered.com/repository/maven-public'
    }
    maven {
        url = 'https://repo.minebench.de/'
    }
}

configurations {
    embed
    implementation.extendsFrom embed
}

dependencies {
    // Apache Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // Apache HttpClient & Apache HttpCore
    implementation('org.apache.httpcomponents:httpclient:4.5.13') {
        exclude module: 'commons-codec'
        exclude module: 'commons-logging'
    }

    // Apache Commons IO
    implementation 'commons-io:commons-io:2.11.0'

    // Apache Commons Codec
    implementation 'commons-codec:commons-codec:1.15'

    // Apache Commons Logging
    implementation 'commons-logging:commons-logging:1.2'

    // Discord RPC
    implementation('club.minnced:java-discord-rpc:2.0.2') {
        exclude module: 'discord-rpc-release'
        exclude module: 'jna'
    }

    // Discord RPC DLL's
    implementation 'club.minnced:discord-rpc-release:3.3.0'

    // Event bus
    implementation 'com.github.therealbush:eventbus:1.0.2'

    // Log4j Core & Log4j API
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'

    // LWJGL, LWJGL Utils & LWJGL Platform
    implementation('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209') {
        exclude module: 'jinput'
    }

    // Oshi Core
    implementation('oshi-project:oshi-core:1.1') {
        exclude module: 'jna'
        exclude module: 'platform'
    }

    // slf4j API
    implementation 'org.slf4j:slf4j-api:1.7.36'

    // Spotify API
    //noinspection GradlePackageUpdate
    embed('se.michaelthelin.spotify:spotify-web-api-java:6.5.4') {
        exclude module: 'commons-codec'
        exclude module: 'commons-logging'
        exclude module: 'slf4j-api'
    }

    // Twitch, Twitch Platform & Twitch External Platform
    implementation 'tv.twitch:twitch:6.5'

    // Java Native Access & Java Native Access Platform
    implementation 'net.java.dev.jna:jna-platform:5.11.0'

    // JInput Uber JAR
    implementation 'net.java.jinput:jinput:2.0.9'

    // JOpt Simple
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'

    //Guava: Google Core Libraries For Java
    //noinspection GradlePackageUpdate
    implementation 'com.google.guava:guava:25.1-jre'

    // Netty/All In One
    //noinspection GradlePackageUpdate
    implementation 'io.netty:netty-all:4.0.23.Final'

    // ICU4J
    implementation 'com.ibm.icu:icu4j-core-mojang:51.2'

    // Realms
    implementation('com.mojang:realms:1.13.9') {
        exclude module: 'commons-logging'
        exclude module: 'commons-compress'
        exclude module: 'httpclient'
        exclude module: 'httpcore'
    }

    // JNA (used for mc & discord RPC to load DLL natives)
    implementation 'net.java.dev.jna:jna:5.11.0'

    // Brigadier
    embed 'com.mojang:brigadier:1.0.18'

    // Used for scripts
    embed 'org.openjdk.nashorn:nashorn-core:15.4'

    // microsoft account authentication
    embed 'com.github.litarvan:OpenAuth:1.1.2'

    // vecma
    embed 'javax.vecmath:vecmath:1.5.2'

    // use all of the jars in the libs directory
    implementation fileTree('libs')
}

jar {
    from(configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        exclude 'module-info.class',
                'META-INF/maven/**',
                'META-INF/DEPENDENCIES**',
                'META-INF/LICENSE**',
                'META-INF/NOTICE**',
                'mozilla/**/*.txt',
                'org/**/*.txt',
                'org/**/*.properties'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    manifest.attributes(
            'Main-Class': 'Start',
            'Class-Path': '.'
    )
}